[project]
name = "virtualize-nex-gddp-cmip6"
description = "Create virtual Zarr store for NASA NEX-GDDP-CMIP6 using VirtualiZarr"
authors = [{ name = "Max Jones", email = "max@developmentseed.org" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.11,<4.0"
license = { text = "Apache-2.0" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dynamic = ["version"]
dependencies = [
    "dask[complete]",
    "h5py",
    "icechunk",
    "kerchunk @ git+https://github.com/mpiannucci/kerchunk@v3",
    "s3fs",
    "VirtualiZarr @ git+https://github.com/zarr-developers/VirtualiZarr.git@main",
    "xarray",
    "zarr",
]


[project.urls]
Repository = "https://github.com/developmentseed/virtualize-nex-gddp-cmip6"

[tool.uv]
prerelease = "allow"
dev-dependencies = [
    "pooch",
    "pytest>=7.2.0",
    "pre-commit>=2.20.0",
    "pytest-mypy",
    "mypy>=0.991",
    "ruff>=0.6.9",
    "pandas-stubs",
]

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
py-modules = ["virtualize_nex_gddp_cmip6"]

[tool.mypy]
# Based on Xarray's MyPy configuration
files = ["virtualize_nex_gddp_cmip6"]
enable_error_code = ["ignore-without-code", "redundant-self", "redundant-expr"]
exclude = [
  'build',
]
show_error_context = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

# Much of the numerical computing stack doesn't have type annotations yet.
[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "affine.*",
  "bottleneck.*",
  "cartopy.*",
  "cf_units.*",
  "cfgrib.*",
  "cftime.*",
  "cloudpickle.*",
  "cubed.*",
  "cupy.*",
  "fsspec.*",
  "h5netcdf.*",
  "h5py.*",
  "iris.*",
  "mpl_toolkits.*",
  "nc_time_axis.*",
  "netCDF4.*",
  "netcdftime.*",
  "numcodecs.*",
  "opt_einsum.*",
  "pint.*",
  "pooch.*",
  "pyarrow.*",
  "pydap.*",
  "scipy.*",
  "seaborn.*",
  "setuptools",
  "sparse.*",
  "toolz.*",
  "zarr.*",
  "numpy.exceptions.*", # remove once support for `numpy<2.0` has been dropped
  "array_api_strict.*",
]
# Start off with these
warn_unused_ignores = true
# Getting these passing should be easy
strict_concatenate = true
strict_equality = true
# Strongly recommend enabling this one as soon as you can
check_untyped_defs = true
# These shouldn't be too much additional work, but may be tricky to
# get passing if you use a lot of untyped libraries
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_decorators = true
# These next few are various gradations of forcing use of type annotations
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
# This one isn't too hard to get passing, but return on investment is lower
no_implicit_reexport = true
# This one can be tricky to get passing if you use a lot of untyped libraries
warn_return_any = true

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py39"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true
